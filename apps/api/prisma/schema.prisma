generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int           @id @default(autoincrement())
  name            String
  email           String        @unique
  phone           String
  password        String
  address         String?
  profile_picture String?
  referral        String        @unique
  roles           Role?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  userPoints      UserPoint[]
  transactions    Transaction[]
  userRewards     UserReward[]
  userVouchers    UserVoucher[]
  reviews         Review[]
  events          Event[]

  @@map("users")
}

enum Role {
  Admin
  Customer
}

model UserReward {
  id        Int          @id @default(autoincrement())
  status    StatusReward
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  user      User         @relation(fields: [userId], references: [id])
  userId    Int
  reward    Reward       @relation(fields: [rewardId], references: [id])
  rewardId  Int

  @@map("user_rewards")
}

enum StatusReward {
  Used
  Unused
}

model Reward {
  id          Int          @id @default(autoincrement())
  name        String
  code        String       @unique
  quota       Int
  nominal     Int
  claimed     Int
  exp_date    String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  userRewards UserReward[]

  @@map("rewards")
}

model UserVoucher {
  id        Int           @id @default(autoincrement())
  status    StatusVoucher
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  user      User          @relation(fields: [userId], references: [id])
  userId    Int

  voucher   Voucher @relation(fields: [voucherId], references: [id])
  voucherId Int

  @@map("user_vouchers")
}

enum StatusVoucher {
  Used
  Unused
}

model Voucher {
  id          Int           @id @default(autoincrement())
  name        String
  code        String        @unique
  quota       Int
  claimed     String
  nominal     Int
  exp_date    String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  UserVoucher UserVoucher[]

  event   Event @relation(fields: [eventId], references: [id])
  eventId Int

  @@map("vouchers")
}

model UserPoint {
  id        Int       @id @default(autoincrement())
  points    Int       @default(0)
  exp_date  DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    Int       @unique

  user User @relation(fields: [userId], references: [id])

  @@map("user_points")
}

model Review {
  id        Int      @id @default(autoincrement())
  comment   String
  rating    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  event_id  Event    @relation(fields: [eventId], references: [id])
  eventId   Int

  @@map("reviews")
}

model Transaction {
  id             Int           @id @default(autoincrement())
  qty            Int
  price          Int
  status         StatusPayment
  total          Int
  payment_method PaymentMethod
  payment_proof  String?
  voucher_used   Int           @default(0)
  reward_used    Int           @default(0)
  point_used     Int           @default(0)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  user   User @relation(fields: [userId], references: [id])
  userId Int

  event   Event @relation(fields: [eventId], references: [id])
  eventId Int

  @@map("transactions")
}

enum PaymentMethod {
  QRIS
  Bank_Transfer
}

enum StatusPayment {
  waiting_for_payment
  waiting_for_admin_confirmation
  done
  rejected
  expired
  canceled
}

model Event {
  id          Int      @id @default(autoincrement())
  name        String
  location    String
  start_date  DateTime
  end_date    DateTime
  discount    Int
  price       Int
  thumbnail   String
  description String   @db.LongText()
  content     String   @db.LongText()
  quota       Int
  booked      Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user         User          @relation(fields: [userId], references: [id])
  userId       Int
  transactions Transaction[]
  reviews      Review[]
  Voucher      Voucher[]

  @@map("events")
}
